"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./components/graph/ForceGraphClient.tsx":
/*!***********************************************!*\
  !*** ./components/graph/ForceGraphClient.tsx ***!
  \***********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ForceGraphClient)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\nfunction ForceGraphClient(param) {\n    let { width = 960, height = 540 } = param;\n    _s();\n    const containerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ForceGraphClient.useEffect\": ()=>{\n            if (!containerRef.current) return;\n            let mounted = true;\n            ({\n                \"ForceGraphClient.useEffect\": async ()=>{\n                    const ForceGraph2D = (await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_force-graph_dist_force-graph_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! force-graph */ \"(app-pages-browser)/./node_modules/force-graph/dist/force-graph.mjs\"))).default;\n                    if (!mounted || !containerRef.current) return;\n                    // Microservices architecture\n                    const gData = {\n                        nodes: [\n                            {\n                                id: 'auth',\n                                name: 'Auth Service'\n                            },\n                            {\n                                id: 'order',\n                                name: 'Order Service'\n                            },\n                            {\n                                id: 'payment',\n                                name: 'Payment Service'\n                            },\n                            {\n                                id: 'user',\n                                name: 'User Service'\n                            },\n                            {\n                                id: 'notification',\n                                name: 'Notification Service'\n                            },\n                            {\n                                id: 'api-gateway',\n                                name: 'API Gateway'\n                            }\n                        ],\n                        links: [\n                            // API Gateway routes to services\n                            {\n                                source: 'api-gateway',\n                                target: 'order',\n                                async: false,\n                                connections: {\n                                    http: 12,\n                                    grpc: 1\n                                }\n                            },\n                            {\n                                source: 'api-gateway',\n                                target: 'payment',\n                                async: false,\n                                connections: {\n                                    http: 8,\n                                    grpc: 1\n                                }\n                            },\n                            {\n                                source: 'api-gateway',\n                                target: 'user',\n                                async: false,\n                                connections: {\n                                    http: 15,\n                                    grpc: 1\n                                }\n                            },\n                            // Auth service called by most services\n                            {\n                                source: 'order',\n                                target: 'auth',\n                                async: false,\n                                connections: {\n                                    grpc: 2\n                                }\n                            },\n                            {\n                                source: 'payment',\n                                target: 'auth',\n                                async: false,\n                                connections: {\n                                    grpc: 2\n                                }\n                            },\n                            {\n                                source: 'user',\n                                target: 'auth',\n                                async: false,\n                                connections: {\n                                    grpc: 2\n                                }\n                            },\n                            {\n                                source: 'auth',\n                                target: 'user',\n                                async: false,\n                                connections: {\n                                    grpc: 2\n                                }\n                            },\n                            // Service interactions\n                            {\n                                source: 'order',\n                                target: 'payment',\n                                async: true,\n                                connections: {\n                                    kafka: 3\n                                }\n                            },\n                            {\n                                source: 'payment',\n                                target: 'notification',\n                                async: true,\n                                connections: {\n                                    kafka: 4\n                                }\n                            },\n                            {\n                                source: 'order',\n                                target: 'notification',\n                                async: true,\n                                connections: {\n                                    kafka: 2\n                                }\n                            }\n                        ]\n                    };\n                    // cross-link node objects for hover effects\n                    gData.links.forEach({\n                        \"ForceGraphClient.useEffect\": (link)=>{\n                            const a = gData.nodes.find({\n                                \"ForceGraphClient.useEffect.a\": (n)=>n.id === link.source\n                            }[\"ForceGraphClient.useEffect.a\"]);\n                            const b = gData.nodes.find({\n                                \"ForceGraphClient.useEffect.b\": (n)=>n.id === link.target\n                            }[\"ForceGraphClient.useEffect.b\"]);\n                            if (a && b) {\n                                !a.neighbors && (a.neighbors = []);\n                                !b.neighbors && (b.neighbors = []);\n                                a.neighbors.push(b);\n                                b.neighbors.push(a);\n                                !a.links && (a.links = []);\n                                !b.links && (b.links = []);\n                                a.links.push(link);\n                                b.links.push(link);\n                            }\n                        }\n                    }[\"ForceGraphClient.useEffect\"]);\n                    const highlightNodes = new Set();\n                    const highlightLinks = new Set();\n                    let hoverNode = null;\n                    // Save/restore node positions\n                    function savePositions() {\n                        const positions = {};\n                        gData.nodes.forEach({\n                            \"ForceGraphClient.useEffect.savePositions\": (node)=>{\n                                if (node.x !== undefined && node.y !== undefined) {\n                                    positions[node.id] = {\n                                        x: node.x,\n                                        y: node.y\n                                    };\n                                }\n                            }\n                        }[\"ForceGraphClient.useEffect.savePositions\"]);\n                        localStorage.setItem('graphPositions', JSON.stringify(positions));\n                        console.log('positions', JSON.stringify(positions));\n                    }\n                    function restorePositions() {\n                        // Always use hardcoded default positions\n                        const positions = {\n                            \"auth\": {\n                                \"x\": 32.598417332088,\n                                \"y\": 6.660367168250269\n                            },\n                            \"order\": {\n                                \"x\": -2.505745532125559,\n                                \"y\": -19.693401302217584\n                            },\n                            \"payment\": {\n                                \"x\": -2.4866583474546204,\n                                \"y\": 0.42566878083795523\n                            },\n                            \"user\": {\n                                \"x\": -1.9951033734462,\n                                \"y\": 17.97567107407183\n                            },\n                            \"notification\": {\n                                \"x\": 32.248188089882824,\n                                \"y\": -10.006569890149956\n                            },\n                            \"api-gateway\": {\n                                \"x\": -34.472120161819575,\n                                \"y\": 0.0876067570318128\n                            }\n                        };\n                        // Commented out for future use - load saved positions from localStorage\n                        // const saved = localStorage.getItem('graphPositions');\n                        // let positions;\n                        // if (saved) {\n                        //     positions = JSON.parse(saved);\n                        // } else {\n                        //     // Use hardcoded default positions\n                        //     positions = {\n                        //         \"auth\": { \"x\": 33.871144604815264, \"y\": 7.933094440977543 },\n                        //         \"order\": { \"x\": -2.505745532125559, \"y\": -19.693401302217584 },\n                        //         \"payment\": { \"x\": -2.4866583474546204, \"y\": 0.42566878083795523 },\n                        //         \"user\": { \"x\": -1.9951033734462, \"y\": 17.97567107407183 },\n                        //         \"notification\": { \"x\": 32.248188089882824, \"y\": -10.006569890149954 },\n                        //         \"api-gateway\": { \"x\": -38.83575652545594, \"y\": 0.17851584794090403 }\n                        //     };\n                        // }\n                        gData.nodes.forEach({\n                            \"ForceGraphClient.useEffect.restorePositions\": (node)=>{\n                                if (positions[node.id]) {\n                                    node.fx = positions[node.id].x;\n                                    node.fy = positions[node.id].y;\n                                }\n                            }\n                        }[\"ForceGraphClient.useEffect.restorePositions\"]);\n                    }\n                    // Restore positions on load\n                    restorePositions();\n                    ForceGraph2D()(containerRef.current).width(containerRef.current.clientWidth).height(containerRef.current.clientHeight).graphData(gData).zoom(11).minZoom(11).maxZoom(11).nodeColor({\n                        \"ForceGraphClient.useEffect\": ()=>'rgba(0,0,0,0)'\n                    }[\"ForceGraphClient.useEffect\"]).nodeCanvasObjectMode({\n                        \"ForceGraphClient.useEffect\": ()=>'before'\n                    }[\"ForceGraphClient.useEffect\"]).onNodeDragEnd({\n                        \"ForceGraphClient.useEffect\": (node)=>{\n                            node.fx = node.x;\n                            node.fy = node.y;\n                            savePositions(); // Auto-save on drag\n                        }\n                    }[\"ForceGraphClient.useEffect\"]).onNodeHover({\n                        \"ForceGraphClient.useEffect\": (node)=>{\n                            highlightNodes.clear();\n                            highlightLinks.clear();\n                            if (node) {\n                                highlightNodes.add(node);\n                                node.neighbors.forEach({\n                                    \"ForceGraphClient.useEffect\": (neighbor)=>highlightNodes.add(neighbor)\n                                }[\"ForceGraphClient.useEffect\"]);\n                                node.links.forEach({\n                                    \"ForceGraphClient.useEffect\": (link)=>highlightLinks.add(link)\n                                }[\"ForceGraphClient.useEffect\"]);\n                            }\n                            hoverNode = node || null;\n                        }\n                    }[\"ForceGraphClient.useEffect\"]).onLinkHover({\n                        \"ForceGraphClient.useEffect\": (link)=>{\n                            highlightNodes.clear();\n                            highlightLinks.clear();\n                            if (link) {\n                                highlightLinks.add(link);\n                                highlightNodes.add(link.source);\n                                highlightNodes.add(link.target);\n                            }\n                        }\n                    }[\"ForceGraphClient.useEffect\"]).onLinkClick({\n                        \"ForceGraphClient.useEffect\": (link)=>{\n                            const sourceNode = gData.nodes.find({\n                                \"ForceGraphClient.useEffect.sourceNode\": (n)=>n.id === link.source\n                            }[\"ForceGraphClient.useEffect.sourceNode\"]);\n                            const targetNode = gData.nodes.find({\n                                \"ForceGraphClient.useEffect.targetNode\": (n)=>n.id === link.target\n                            }[\"ForceGraphClient.useEffect.targetNode\"]);\n                            console.log('Connection clicked:', {\n                                source: sourceNode,\n                                target: targetNode,\n                                link: link\n                            });\n                        }\n                    }[\"ForceGraphClient.useEffect\"]).autoPauseRedraw(false).nodeCanvasObject({\n                        \"ForceGraphClient.useEffect\": (node, ctx, globalScale)=>{\n                            const baseSize = 0.5; // base logical radius\n                            const maxRadius = 3; // maximum radius in pixels\n                            const radius = Math.min(baseSize * globalScale, maxRadius); // scales with zoom but caps at maxRadius\n                            // draw circle (always)\n                            ctx.fillStyle = '#5D7670';\n                            ctx.beginPath();\n                            ctx.arc(node.x, node.y, radius, 0, 2 * Math.PI);\n                            ctx.closePath();\n                            ctx.fill();\n                            // add white border for hovered nodes\n                            if (highlightNodes.has(node)) {\n                                ctx.beginPath();\n                                ctx.arc(node.x, node.y, radius, 0, 2 * Math.PI);\n                                ctx.strokeStyle = '#ffffff';\n                                ctx.lineWidth = 0.2;\n                                ctx.stroke();\n                            }\n                            // always draw label\n                            const label = node.name || 'Service';\n                            const fontSize = 12 / globalScale; // keep text readable\n                            ctx.fillStyle = '#ffffff';\n                            ctx.font = \"\".concat(fontSize, \"px sans-serif\");\n                            ctx.textAlign = 'center';\n                            ctx.textBaseline = 'middle';\n                            ctx.fillText(label, node.x, node.y);\n                        }\n                    }[\"ForceGraphClient.useEffect\"]).nodeRelSize(4).linkColor({\n                        \"ForceGraphClient.useEffect\": ()=>'#bbbbbb'\n                    }[\"ForceGraphClient.useEffect\"]).linkWidth({\n                        \"ForceGraphClient.useEffect\": (link)=>highlightLinks.has(link) ? 5 : 1\n                    }[\"ForceGraphClient.useEffect\"]).linkLineDash({\n                        \"ForceGraphClient.useEffect\": (link)=>link.async && [\n                                1,\n                                1\n                            ]\n                    }[\"ForceGraphClient.useEffect\"]).linkDirectionalArrowLength(2).linkLabel({\n                        \"ForceGraphClient.useEffect\": (link)=>{\n                            const sourceNode = gData.nodes.find({\n                                \"ForceGraphClient.useEffect.sourceNode\": (n)=>n.id === link.source.id\n                            }[\"ForceGraphClient.useEffect.sourceNode\"]);\n                            const targetNode = gData.nodes.find({\n                                \"ForceGraphClient.useEffect.targetNode\": (n)=>n.id === link.target.id\n                            }[\"ForceGraphClient.useEffect.targetNode\"]);\n                            let label = \"<b>\".concat(link.source.id, \" → \").concat(link.target.id, \"</b>\");\n                            if (link.connections) {\n                                Object.entries(link.connections).forEach({\n                                    \"ForceGraphClient.useEffect\": (param)=>{\n                                        let [type, count] = param;\n                                        label += \"<br>\".concat(type, \": \").concat(count);\n                                    }\n                                }[\"ForceGraphClient.useEffect\"]);\n                            }\n                            return label;\n                        }\n                    }[\"ForceGraphClient.useEffect\"]).linkLabelStyle({\n                        backgroundColor: '#bbbbbb',\n                        color: '#000000',\n                        padding: '4px 8px',\n                        borderRadius: '4px',\n                        fontSize: '12px',\n                        fontFamily: 'sans-serif'\n                    });\n                    // Dash animation for async links\n                    const dashLen = 1;\n                    const gapLen = 1;\n                    const st = +new Date();\n                    const dashAnimateTime = 300; // time to animate a single dash\n                    (function animate() {\n                        const t = (+new Date() - st) % dashAnimateTime / dashAnimateTime;\n                        const lineDash = t < 0.5 ? [\n                            0,\n                            gapLen * t * 2,\n                            dashLen,\n                            gapLen * (1 - t * 2)\n                        ] : [\n                            dashLen * (t - 0.5) * 2,\n                            gapLen,\n                            dashLen * (1 - (t - 0.5) * 2),\n                            0\n                        ];\n                        ForceGraph2D()(containerRef.current).linkLineDash({\n                            \"ForceGraphClient.useEffect.animate\": (link)=>link.async && lineDash\n                        }[\"ForceGraphClient.useEffect.animate\"]);\n                        requestAnimationFrame(animate);\n                    })(); // IIFE\n                }\n            })[\"ForceGraphClient.useEffect\"]();\n            return ({\n                \"ForceGraphClient.useEffect\": ()=>{\n                    mounted = false;\n                    if (containerRef.current) containerRef.current.innerHTML = \"\";\n                }\n            })[\"ForceGraphClient.useEffect\"];\n        }\n    }[\"ForceGraphClient.useEffect\"], [\n        width,\n        height\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: containerRef,\n        className: \"w-full h-full overflow-hidden rounded-xl\"\n    }, void 0, false, {\n        fileName: \"/home/evan/Code/gotrayce/web2/components/graph/ForceGraphClient.tsx\",\n        lineNumber: 264,\n        columnNumber: 9\n    }, this);\n}\n_s(ForceGraphClient, \"8puyVO4ts1RhCfXUmci3vLI3Njw=\");\n_c = ForceGraphClient;\nvar _c;\n$RefreshReg$(_c, \"ForceGraphClient\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/graph/ForceGraphClient.tsx\n"));

/***/ })

});